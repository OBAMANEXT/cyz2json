name: Build Cyz2Json

on:
    push:
      tags:
        - 'v*'
    workflow_dispatch: # Allows manual triggering
      inputs:
        version:
          description: 'Version tag (e.g. v1.0.0)'
          required: true
          type: string
        reason:
          description: 'Reason for manual trigger'
          required: false
          default: 'Manual run'
jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
          matrix:
            os: [ubuntu-latest, windows-latest, macos-latest]
            
        steps:
        - uses: actions/checkout@v3
        
        - name: Setup .NET
          uses: actions/setup-dotnet@v4
          with:
                dotnet-version: '8.0.x'
        
        - name: Restore dependencies
          run: dotnet restore
        
        - name: Build
          run: dotnet build --configuration Release --no-restore
        
        - name: Set RID
          id: set-rid
          run: |
            if [ "${{ matrix.os }}" == "windows-latest" ]; then
              echo "rid=win-x64" >> $GITHUB_OUTPUT
            elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
              echo "rid=linux-x64" >> $GITHUB_OUTPUT
            elif [ "${{ matrix.os }}" == "macos-latest" ]; then
              echo "rid=osx-x64" >> $GITHUB_OUTPUT
            fi
          shell: bash
        
        - name: Publish
          run: dotnet publish Cyz2Json/Cyz2Json.csproj -c Release --self-contained true
                
        - name: Copy License File
          run: cp LICENSE.txt Cyz2Json/bin/Release/net8.0/*/publish/ # Assuming LICENSE is at the root

        - name: Zip Release Files
          run: zip -r cyz2json-${{ matrix.os }}.zip ./Cyz2Json/bin/Release/net8.0/*/*/
          shell: bash


        - name: Check Release
          id: check_release
          uses: actions/github-script@v6
          with:
            script: |
              try {
                const release = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: '${{ github.event.inputs.version || github.ref_name }}'
                })
                return release.data.upload_url
              } catch (error) {
                const release = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: '${{ github.event.inputs.version || github.ref_name }}',
                  name: 'Release ${{ github.event.inputs.version || github.ref_name }}',
                  body: '${{ github.event.inputs.reason }}'
                })
                return release.data.upload_url
              }


              - name: Create Release
              id: create_release
              if: steps.check_release.outputs.result == ''
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.event.inputs.version || github.ref_name }}
                release_name: Release ${{ github.event.inputs.version || github.ref_name }}
                body: ${{ github.event.inputs.reason }}
    
        - name: Upload Release Asset
          uses: actions/upload-release-asset@v1
          env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
                upload_url: ${{ steps.check_release.outputs.result || steps.create_release.outputs.upload_url }}
                asset_path: cyz2json-${{ matrix.os }}.zip
                asset_name: cyz2json-${{ matrix.os }}.zip
                asset_content_type: application/zip